#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Python module prova.py
# Autogenerated from prova
# Generated on Fri Aug 26 12:06:18 2005

# Warning: Do not modify any context comment such as #--
# They are required to keep user's code

import os

import gtk

from appbase import AppBase


DEBUG = 1

from CampsCerc import *
class FrmCerca(AppBase):

	
	def __init__(self, pCamps, pDades, gjlib ):
		AppBase.__init__(self, gjlib, root="frm_cerca")
		
		self.res = []
		self.__dades = pDades
		# establim les columnes/camps del model i el cream  
		self.liststore = gtk.ListStore( *pCamps.obte_tipus() )
		self.treeview = self.get_widget("grid")
		self.treeview.set_model(self.liststore)

		# anem a crear les columnes, ;)
		self.camps_cercador = pCamps
		self.camps = self.camps_cercador.obte_camps()
		for camp in self.camps:
			self.cell = gtk.CellRendererText()
			self.tvcolumn = gtk.TreeViewColumn(self.camps_cercador.obte_etiqueta(camp), self.cell, text=self.camps.index(camp))
			self.treeview.append_column(self.tvcolumn)
			self.tvcolumn.set_sort_column_id(self.camps.index(camp))  
			
		self.treeview.set_search_column(1)

		self.treeview.set_model(None) 
		for p in self.__dades: 
						
			# Tractam si hi ha camps buits....
			p2 = []
			for x in p:
				if x: p2.append(x)
				else: 
					if type(x) is str:
						p2.append("")
					else:
						p2.append(0)
			piter = self.liststore.append(p2)
		self.treeview.set_model(self.liststore)
	#-- FrmCerca.new }


	#-- FrmCerca.new {
	def new(self):
		if DEBUG: print "A new %s has been created" % self.__class__.__name__

	#-- FrmCerca.new }

	#-- FrmCerca custom methods {
				

	def run(self):
		self.show_form()
		
		AppBase.run( self )
		
		self.hide_form()
		return self.res
	
	#-- FrmCerca custom methods }

	#-- FrmCerca.on_cerca {
	def on_cerca(self, widget, *args):
			
		if DEBUG: print "on_cerca called with self.%s" % widget.get_name()
		
		treeselection = self.treeview.get_selection()
		(model, iter) = treeselection.get_selected()
		if iter:
			path = self.liststore.get_path(iter)
			self.res = self.liststore.get(iter, *range(len(self.camps)))
		self.quit()
		#-- FrmCerca.on_cerca }

	#-- FrmCerca.on_cancela {
	def on_cancela(self, widget, *args):
			
		if DEBUG: print "on_cancela called with self.%s" % widget.get_name()

		self.quit()
	#-- FrmCerca.on_cancela }

