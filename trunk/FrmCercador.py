#!/usr/bin/env python
# -*- coding: UTF8 -*-

# Python module prova.py
# Autogenerated from prova
# Generated on Thu Sep  1 12:12:14 2005

# Warning: Do not modify any context comment such as #--
# They are required to keep user's code


import os
import BaseDades as bdd
import gtk

from appbase import AppBase

a

DEBUG = 1

class Cercador:
	"""
	Classe que crea els dialegs per cercar una fitxa a una taula
	"""

	def __init__(self, pCamps, pTaula,pDadesConnexio):
		self.c = pCamps
		self.b = pDadesConnexio
		self.t = pTaula
		
		
	def run(self):
		"""
		Executa la cerca
		"""		
		frm_cercador = FrmCercador( self.c )
		cercar = frm_cercador.run()
		
		if cercar:
			#Instanciam BD
			bd = bdd.BaseDades()
			fitxerBD = os.path.normpath( os.path.join( os.sep.join( os.getcwd().split( os.sep )), self.b["nom_base_dades"] ))
			conn = bd.connexio( self.b["host"], fitxerBD, self.b["usuari"], self.b["password"] )
			if DEBUG: print bd
		   
			#si estam conectats continuam
			if conn:
				sql = "SELECT "+ ",".join(self.c.obte_camps())+" FROM "+self.t
				if  cercar:
					sql += " WHERE " + " and  ".join(["%s LIKE '#%s#'" % (k, v) for k, v in cercar.items() if (v != "")])
					sql = sql.replace("#","%")
			
				if DEBUG: print "SQL: "+sql
				dades = bd.executa_query( sql )
				
				if DEBUG:  print dades
			
			
			
				frm_cerca = FrmCerca( self.c, dades )
				return frm_cerca.run()
				
				
  


class FrmCerc(AppBase):

	def __init__(self, pCamps ):
		
		AppBase.__init__(self, gjlib, root="frm_cercador")
		self.camps = pCamps
		self.res = {}
		
		fila = 0
		self.taula = self.get_widget("taula")
		self.taula.resize(len(self.camps.obte_camps_cerca()),2)
		
		for x in self.camps.obte_camps_cerca():
			
			etiqueta = gtk.Label(self.camps.obte_etiqueta(x))
			etiqueta.show()
			self.taula.attach(etiqueta,0,1,fila,fila+1)
			
			entrada = gtk.Entry()
			entrada.set_name(x)
			entrada.show()
			self.taula.attach(entrada,1,2,fila,fila+1)
			
			fila += 1	


	#-- FrmCercador.new {
	def new(self):
		if DEBUG: print "A new %s has been created" % self.__class__.__name__
	#-- FrmCercador.new }

	#-- FrmCercador custom methods {
	def run(self):
		AppBase.run(self)
		return self.res

	#-- FrmCercador custom methods }

	#-- FrmCercador.on_cercar {
	def on_cercar(self, widget, *args):
		if DEBUG: print "on_cercar called with self.%s" % widget.get_name()
		
		fills = self.taula.get_children()
		entrades = [x for x in fills if (type(x) is gtk.Entry)]
		camps = [x.name for x in entrades]
		valors = [x.get_text() for x in entrades ] 
		
		self.res = dict(zip(camps, valors)) 
		
		self.quit()
	#-- FrmCercador.on_cercar }

	#-- FrmCercador.on_cancelar {
	def on_cancelar(self, widget, *args):
		if DEBUG: print "on_cancelar called with self.%s" % widget.get_name()
		
		self.quit()
	#-- FrmCercador.on_cancelar }

